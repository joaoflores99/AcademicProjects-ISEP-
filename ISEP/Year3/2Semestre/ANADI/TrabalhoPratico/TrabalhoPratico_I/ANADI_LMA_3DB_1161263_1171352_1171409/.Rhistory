#Analise para cada protocolo no servidor vsrv16
EstudoEstatisticoDuracao_vsrv17_PPTP<-EstudoDuracaoSessoesServidorVPN(vpnsessions,"vsrv17","PPTP")
EstudoEstatisticoDuracao_vsrv17_SSTP<-EstudoDuracaoSessoesServidorVPN(vpnsessions,"vsrv17","SSTP")
EstudoEstatisticoDuracao_vsrv17_SOFTETHER<-EstudoDuracaoSessoesServidorVPN(vpnsessions,"vsrv17","SOFTETHER")
EstudoEstatisticoDuracao_vsrv17_OPENVPN_L2<-EstudoDuracaoSessoesServidorVPN(vpnsessions,"vsrv17","OPENVPN_L2")
EstudoEstatisticoDuracao_vsrv17_OPENVPN_L3<-EstudoDuracaoSessoesServidorVPN(vpnsessions,"vsrv17","OPENVPN_L3")
#################Ponto 2############################################################################################3
#a)
#Na totalidade de tempo para cada um dos servidores
Totvsrv8<-subset(vpnsessions, vpnsessions$Servidor=="vsrv8")
dispTotvsrv8<-Disponibilidade(Totvsrv8)
print(dispTotvsrv8)
Totvsrv10<-subset(vpnsessions, vpnsessions$Servidor=="vsrv10")
dispTotvsrv10<-Disponibilidade(Totvsrv10)
print(dispTotvsrv10)
Totvsrv11<-subset(vpnsessions, vpnsessions$Servidor=="vsrv11")
dispTotvsrv11<-Disponibilidade(Totvsrv11)
print(dispTotvsrv11)
Totvsrv16<-subset(vpnsessions, vpnsessions$Servidor=="vsrv16")
dispTotvsrv16<-Disponibilidade(Totvsrv16)
print(dispTotvsrv16)
Totvsrv17<-subset(vpnsessions, vpnsessions$Servidor=="vsrv17")
dispTotvsrv17<-Disponibilidade(Totvsrv17)
print(dispTotvsrv17)
#Em 2017 para o srv vsrv10
sessoesAnalisar2017<-FiltrarPor2017(vpnsessions)
vsrv102017<-subset(sessoesAnalisar2017, sessoesAnalisar2017$Servidor=="vsrv10")
disp2017vsrv10<-Disponibilidade(vsrv102017)
print(disp2017vsrv10)
#No mês de Março de 2017 para o srv vsrv17
sessoesAnalisar2017<-FiltrarPor2017(vpnsessions)
sessoesAnalisar2017Marco<-FiltrarPorMes(sessoesAnalisar2017,"03")
vsrv172017marco<-subset(sessoesAnalisar2017Marco, sessoesAnalisar2017Marco$Servidor=="vsrv17")
disp2017vsrv17marco<-Disponibilidade(vsrv172017marco)
print(disp2017vsrv17marco)
#No dia 28 de Fevereiro de 2017 para o srv vsrv17
sessoesAnalisar2017<-FiltrarPor2017(vpnsessions)
sessoesAnalisar2017Fev<-FiltrarPorMes(sessoesAnalisar2017,"02")
sessoesAnalisar2017Fev28<-filtrarPorDia(sessoesAnalisar2017Fev,"08")
vsrv172017Fev28<-subset(sessoesAnalisar2017Fev, sessoesAnalisar2017Fev$Servidor=="vsrv17")
disp2017vsrv17Fev28<-Disponibilidade(vsrv172017Fev28)
print(disp2017vsrv17Fev28)
#############
#b)
janeiroMins<-contabilizarMinutos(ymd_hm("2017-01-01 00:00"),ymd_hm("2017-01-31 23:59"))
fevereiroMins<-contabilizarMinutos(ymd_hm("2017-02-01 00:00"),ymd_hm("2017-02-28 23:59"))
dados2017<-FiltrarPor2017(vpnsessions)
vsrv8Jan<-FiltrarPorMes(dados2017,"01")
vsrv8Fev<-FiltrarPorMes(dados2017,"02")
fiab_vsrv8Jan<-calculoFiabilidade(vsrv8Jan,janeiroMins)
fiab_vsrv8Fev<-calculoFiabilidade(vsrv8Fev,fevereiroMins)
vMinutosFevereiro<-seq(from=0,to=fevereiroMins-1, by=1)
vMinutosJaneiro<-seq(from=0,to=janeiroMins-1, by=1)
plot(vMinutosJaneiro,fiab_vsrv8Jan,xlab = "Minutos",ylab = "Fiabilidade",main = "Analise Fiabilidade do Servidor vsrv8 - Janeiro")
plot(vMinutosFevereiro,fiab_vsrv8Fev,xlab = "Minutos",ylab = "Fiabilidade",main = "Analise Fiabilidade do Servidor vsrv8 - Fevereiro")
#################
#c)
#Para cada dia do mes de Dezembro de 2017
tfSessoesAnalisar2017<-FiltrarPor2017(vpnsessions)
tf2017vsrv16<-subset(tfSessoesAnalisar2017, tfSessoesAnalisar2017$Servidor=="vsrv16")
vetorTaxasFalhasDezembroPorDia<-estudoTaxaFalhasPorCadaDiaDezembro(tf2017vsrv16)
View(vetorTaxasFalhasDezembroPorDia)
t.test(vetorTaxasFalhasDezembroPorDia, alternative = "less", conf.level=0.99 , mu = 0.01)
#################
#d)
#média do tempo entre falhas do srv vsrv10 para todo o registo
tfvsrv10<-subset(vpnsessions, vpnsessions$Servidor=="vsrv10")
vec_Falhasvsrv10<-TempoEntreFalhas(tfvsrv10)
View(resultvsrv10)
mediavsrv10<-mean(vec_Falhasvsrv10)
print(mediavsrv10)
#média do tempo entre falhas do srv vsrv17 para todo o registo
tfvsrv17<-subset(vpnsessions, vpnsessions$Servidor=="vsrv17")
vec_Falhasvsrv17<-TempoEntreFalhas(tfvsrv17)
View(resultvsrv17)
mediavsrv17<-mean(vec_Falhasvsrv17)
print(mediavsrv17)
t.test(vec_Falhasvsrv10,vec_Falhasvsrv17, alternative = "two.slided", conf.level=0.99 , var.equal = FALSE,paired = FALSE, mu = 0)
###########
#e)
vec_Falhasvsrv8<-TempoEntreFalhas(subset(vpnsessions,vpnsessions$Servidores=="vsrv8"))
vec_Falhasvsrv11<-TempoEntreFalhas(subset(vpnsessions,vpnsessions$Servidores=="vsrv10"))
vec_Falhasvsrv16<-TempoEntreFalhas(subset(vpnsessions,vpnsessions$Servidores=="vsrv16"))
tab<-data.frame(vec_Falhasvsrv8,vec_Falhasvsrv10,vec_Falhasvsrv11,vec_Falhasvsrv16,vec_Falhasvsrv17, check.rows = FALSE,check.names = FALSE)
library(reshape2)
Mdados<-melt(tab,variable.name="Servidor", value.name = "TempoFalha",na.rm = T)
boxplot(TempoFalha~Servidor,Mdados)
oneway.test(TempoFalha~Servidor,Mdados,var.equal = FALSE)
######################################Funcoes##############################################################
####Metodos Para Estudo Simultaneo
#Metodo retorna estudo estatisco para todos os dados de um data set para todos dados, o ano de 2017 todos os meses
#dados<-data frame com informacao das sessoes
EstudoEstatisticoSimultaneoTodos<-function(dados){
#Vetor com as sessoes simultaneas para todos os dados
todos<- EmSimultaneo(dados,dados$Inicio[1],dados$Fim[nrow(dados)])
#Retorna vetor com media,desvio padrao,maximo,minimo
simultaneoTodos<-vetorEstatistico(todos)
#retorna data frame para o ano de 2017
dados2017<-FiltrarPor2017Simultaneo(dados)
#Vetor com as sessoes simultaneo em 2017
todos2017<-EmSimultaneo(dados2017,ymd_hm("2017-01-01 00:00"),ymd_hm("2017-12-31 23:59"))
#Vetor estatistico para os ano 2017
simultaneo2017<-vetorEstatistico(todos2017)
#Retorna data frame com estudo de dados smultaneo para todos os meses
meses<-EstudoEstatisticoSimutaneoMensal(dados2017)
#cria dataframe
resultado<-data.frame(Media=numeric(),DesvioPadrao=numeric(),Minimo=numeric(),Maximo=numeric())
#combina linhas
resultado<-rbind(simultaneoTodos,simultaneo2017,meses)
colnames(resultado)<-c("Media","DesvioPadrao","Minimo","Maximo")
#nomeia colunas
v<-arrayPeriodo()
rownames(resultado)<-v
return(resultado)
}
#Retorna vetor com sessoes simultaneo de uma data incial ate uma data final
EmSimultaneo<-function(dados,dataInicial, dataFinal){
if (nrow(dados)>0) {
intervalo<-as.interval(dados$Inicio,dados$Fim)
l<-difftime(dataFinal,dataInicial,units="mins")
data<-dataInicial
res<-integer()
length(res)<-l
for (i in 1:length(res)) {
z<-c(data %within% intervalo)
result <-sum(z,na.rm = TRUE)
res[i] <- result
data<-data+minutes(1)
}
}else{
res<-c(0)
}
return(res)
}
FiltrarPor2017Simultaneo<-function(dados){
filtrado<-subset(dados, format(as.Date(dados$Data),"%Y")=='2017' | format(as.Date(dados$Fim),"%Y")=='2017')
return(filtrado)
}
#Filtra os dados para o ano de 2017
#dados->dataframe com dados de sessoes
FiltrarPor2017<-function(dados){
filtrado<-subset(dados, format(as.Date(dados$Data),"%Y")=='2017')
return(filtrado)
}
#Estudo de Sessoes em simultaneos para todos os meses para o ano de 2017
#dados->dataframe com os informacoes de sessoes de 2017
EstudoEstatisticoSimutaneoMensal<-function(dados){
resultado<-data.frame(Media=numeric(),DesvioPadrao=numeric(),Minimo=numeric(),Maximo=numeric())
Jan<-vetorEstatisticoSimultaneoMes(dados,"01",ymd_hm("2017-01-01 00:00"),ymd_hm("2017-01-31 23:59"))
Fev<-vetorEstatisticoSimultaneoMes(dados,"02",ymd_hm("2017-02-01 00:00"),ymd_hm("2017-02-28 23:59"))
Mar<-vetorEstatisticoSimultaneoMes(dados,"03",ymd_hm("2017-03-01 00:00"),ymd_hm("2017-03-31 23:59"))
Ab<-vetorEstatisticoSimultaneoMes(dados,"04",ymd_hm("2017-04-01 00:00"),ymd_hm("2017-04-30 23:59"))
Ma<-vetorEstatisticoSimultaneoMes(dados,"05",ymd_hm("2017-05-01 00:00"),ymd_hm("2017-05-31 23:59"))
Ju<-vetorEstatisticoSimultaneoMes(dados,"06",ymd_hm("2017-06-01 00:00"),ymd_hm("2017-06-30 23:59"))
Jl<-vetorEstatisticoSimultaneoMes(dados,"07",ymd_hm("2017-07-01 00:00"),ymd_hm("2017-07-31 23:59"))
Ag<-vetorEstatisticoSimultaneoMes(dados,"08",ymd_hm("2017-08-01 00:00"),ymd_hm("2017-08-31 23:59"))
St<-vetorEstatisticoSimultaneoMes(dados,"09",ymd_hm("2017-09-01 00:00"),ymd_hm("2017-09-30 23:59"))
Ot<-vetorEstatisticoSimultaneoMes(dados,"10",ymd_hm("2017-10-01 00:00"),ymd_hm("2017-10-31 23:59"))
Nv<-vetorEstatisticoSimultaneoMes(dados,"11",ymd_hm("2017-11-01 00:00"),ymd_hm("2017-11-30 23:59"))
Dz<-vetorEstatisticoSimultaneoMes(dados,"12",ymd_hm("2017-12-01 00:00"),ymd_hm("2017-12-31 23:59"))
resultado<-rbind(Jan,Fev,Mar,Ab,Ma,Ju,Jl,Ag,St,Ot,Nv,Dz)
return(resultado)
}
#Retorna vetor estatistico com media, desvio padra minimo(excluido zeros) e maximo
#dados->vetor com numero de sessoes simultaneas de um determinado periodo
vetorEstatistico<-function(dados){
if(NROW(dados)>0){
media<-mean(dados)
desvioPadrao<-sd(dados)
minimo<-min(dados)
maximo<-max(dados,na.rm = T)
v<-c(media,desvioPadrao,minimo,maximo)
}else{
v<-c(0,0,0,0)
}
return(v)
}
#Retorna vetor estatisco de um determinado mes
#dados<-data frame com informacao das sessoes simultaneas
#mes<- mes a analisar
#inico<- lubridate do inico do mes a analisar
#fim<- lubridate do fim do mes a analisar
vetorEstatisticoSimultaneoMes<-function(dados,mes,inicio,fim){
filtrado<-FiltrarPorMesSimultaneo(dados,mes)
simultaneo<-EmSimultaneo(filtrado,inicio,fim)
resultado<-vetorEstatistico(simultaneo)
return(resultado)
}
#Filtra os dados para um determinados mes, com um subset em que o mes de inicio ou o mes de fim e igual ao mes a analisar
#dados<- dataframe de sessoes a analisar
#mes<-mes a analisar
FiltrarPorMesSimultaneo<-function(dados,mes){
filtrado<-subset(dados, format(as.Date(dados$Inicio),"%m")==mes | format(as.Date(dados$Fim),"%m")==mes)
return(filtrado)
}
#Filtra os dados para um determinados mes, com um subset em que o mes em que se deu a sessao seja igual ao mes a analisar
#dados<- dataframe de sessoes a analisar
#mes<-mes a analisar
FiltrarPorMes<-function(dados,mes){
filtrado<-subset(dados, format(as.Date(dados$Data),"%m")==mes)
return(filtrado)
}
#vector de periodos a analisar com as informacoes de sessoes
#retorna vetor com os periodos a analisar
arrayPeriodo<-function(){
v<-c("Todos","2017","Janeiro","Fevereiro","Marco","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro" )
return (v)
}
#Faz um estudo estatistico de sessoes em simultaneo para um dado servidor
#dados<-dataframe com informacao das sessoes
#servidor<- servidor a fazer o estudo estatistico de sessoes simultaneas
#retorna estudo estatistico de sessoes em simultaneo para todos periodos a analisar de um servidor
EstudoEstatisticoSimultaneoServidor<-function(dados,servidor){
filtrado<-subset(dados,dados$Servidores==servidor)
resultado<-EstudoEstatisticoSimultaneoTodos(filtrado)
return(resultado)
}
#Faz um estudo estatistico de sessoes em simultaneo para um dado protocolo
#dados<-dataframe com informacao das sessoes
#vpn<- protocolo a fazer o estudo estatistico de sessoes simultaneas
#retorna estudo estatistico de sessoes em simultaneo para todos periodos a analisar de um protocolo
EstudoEstatisticoSimultaneoVPN<-function(dados,vpn){
filtrado<-subset(dados,dados$Protocolo==vpn)
resultado<-EstudoEstatisticoSimultaneoTodos(filtrado)
return(resultado)
}
#Faz um estudo estatistico de sessoes em simultaneo para um dado servidor e protocolo
#dados<-dataframe com informacao das sessoes
#servidor<- servidor a fazer o estudo estatistico de sessoes simultaneas
#vpn<- protocolo a fazer o estudo estatistico de sessoes simultaneas
#retorna estudo estatistico de sessoes em simultaneo para todos periodos a analisar de um servidor e protocolo
EstudoEstatisticoSimultaneoServidorVPN<-function(dados,servidor,vpn){
filtrado<-subset(dados,dados$Servidor==servidor & dados$Protocolo==vpn)
resultado<-EstudoEstatisticoSimultaneoTodos(filtrado)
return(resultado)
}
###Metodos para Tempo entre Falhas Consecutivas de um servidor
#Faz estudo estatistico de Tempo entre falhas consecutivas de um dado servidor
#dados<-dataframe com informacao das sessoes
#servidor<- servidor a fazer o estudo estatistico de sessoes simultaneas
#retorna estudo estistico de tempo entre falhas consecutivas de um dados servidor nos periodos a serem analisados
EstudoEstatisticoFalhasConsecutivasServidor<-function(dados,servidor){
filtroFalhasSevidor<-subset(dados,dados$Servidor==servidor & dados$Tempo<=1)
resultado<-EstudoEstatisticoFalhasConsecutivas(filtroFalhasSevidor)
return(resultado)
}
#Faz estudo estatistico Tempo entre falhas consecutivas das sessoes consideradas como falhas
#dados<- dataframe com informacao das sessoes menores ou iguais 1 minuto de tempo de sessao
#retorna estudo estaistico para todos periodos com informacao da media,desvio padrao, minimo e maximo
EstudoEstatisticoFalhasConsecutivas<-function(dados){
todos<- TempoEntreFalhas(dados)
falhasTodos<-vetorEstatistico(todos)
dados2017<-FiltrarPor2017(dados)
todos2017<-TempoEntreFalhas(dados2017)
falhas2017<-vetorEstatistico(todos2017)
meses<-EstudoEstatisticoTempoEntreFalhasMensal(dados2017)
resultado<-data.frame(Media=numeric(),DesvioPadrao=numeric(),Minimo=numeric(),Maximo=numeric())
resultado<-rbind(falhasTodos,falhas2017,meses)
colnames(resultado)<-c("Media","DesvioPadrao","Minimo","Maximo")
v<-arrayPeriodo()
rownames(resultado)<-v
return(resultado)
}
#Faz o estudo estatistico entre sessoes consideradas falhase determina o tempo de o fim de uma falha ate o inicio de uma proxima falha
#dados<-dataframe com informacao de dados considerados como falhas
TempoEntreFalhas<- function(dados){
if (nrow(dados)>0) {
res<-as.numeric(vector())
for(i in 1:length(dados$Tempo)-1){
for (j in 2:length(dados$Tempo) ) {
res[i]<-difftime(dados$Inicio[j],dados$Fim[i],units="mins")
}
}
}else{
res<-c(0)
}
return(res)
}
#Faz o estudo estatistico de sessoes consideradas como falhas para todos os meses de 2017
#dados<-dataframe com informacao de dados considerados como falhas
EstudoEstatisticoTempoEntreFalhasMensal<-function(dados){
resultado<-data.frame(Media=numeric(),DesvioPadrao=numeric(),Minimo=numeric(),Maximo=numeric())
Jan<-vetorEstatisticoTempoEntreFalhasMes(dados,"01")
Fev<-vetorEstatisticoTempoEntreFalhasMes(dados,"02")
Mar<-vetorEstatisticoTempoEntreFalhasMes(dados,"03")
Ab<-vetorEstatisticoTempoEntreFalhasMes(dados,"04")
Ma<-vetorEstatisticoTempoEntreFalhasMes(dados,"05")
Ju<-vetorEstatisticoTempoEntreFalhasMes(dados,"06")
Jl<-vetorEstatisticoTempoEntreFalhasMes(dados,"07")
Ag<-vetorEstatisticoTempoEntreFalhasMes(dados,"08")
St<-vetorEstatisticoTempoEntreFalhasMes(dados,"09")
Ot<-vetorEstatisticoTempoEntreFalhasMes(dados,"10")
Nv<-vetorEstatisticoTempoEntreFalhasMes(dados,"11")
Dz<-vetorEstatisticoTempoEntreFalhasMes(dados,"12")
resultado<-rbind(Jan,Fev,Mar,Ab,Ma,Ju,Jl,Ag,St,Ot,Nv,Dz)
return(resultado)
}
#retorna estudo estatistico de sessoes considerados falhas para um mes em 2017
#dados<-dataframe com informacao de dados considerados como falhas
#mes<-mes a ser analisado
vetorEstatisticoTempoEntreFalhasMes<-function(dados,mes){
filtrado<-FiltrarPorMes(dados,mes)
simultaneo<-TempoEntreFalhas(filtrado)
resultado<-vetorEstatistico(simultaneo)
return(resultado)
}
#Faz estudo estatistico de Tempo entre falhas consecutivas de um dado servidor e um dado Protocolo
#dados<-dataframe com informacao das sessoes
#servidor<- servidor a fazer o estudo estatistico de sessoes simultaneas
#vpn<- protocolo a fazer o estudo estatistico de sessoes simultaneas
#retorna estudo estistico de tempo entre falhas consecutivas de um dados servidor e protocolonos periodos a serem analisados
EstudoEstatisticoFalhasConsecutivasServidorVPN<-function(dados,servidor,vpn){
filtrado<-subset(dados,dados$Servidor==servidor & dados$Protocolo==vpn & dados$Tempo<=0)
resultado<-EstudoEstatisticoFalhasConsecutivas(filtrado)
return(resultado)
}
####Metodos Para Estudo Duracao Sessoes
#Metodo retorna estudo estatisco para todos os dados de um data set para todos dados, o ano de 2017 todos os meses
#dados<-data frame com informacao das sessoes
EstudoEstatisticoDuracaoSessoes<-function(dados){
#Vetor com as sessoes com duracao maior de 1 min para todos os dados
todos<- DuracaoSessoes(dados)
#Retorna vetor com media,desvio padrao,maximo,minimo
duracaoTodos<-vetorEstatistico(todos)
#retorna data frame para o ano de 2017
dados2017<-FiltrarPor2017Simultaneo(dados)
#Vetor com as sessoes durcao de sessao maior de 1 min em 2017
sessoes2017<-DuracaoSessoes(dados2017)
#Vetor estatistico para os ano 2017
duracao2017<-vetorEstatistico(sessoes2017)
#Retorna data frame com estudo de duracao de sessoes para todos os meses
meses<-EstudoEstatisticoDuracaoMensalMensal(dados2017)
#cria dataframe
resultado<-data.frame(Media=numeric(),DesvioPadrao=numeric(),Minimo=numeric(),Maximo=numeric())
#combina linhas
resultado<-rbind(duracaoTodos,duracao2017,meses)
colnames(resultado)<-c("Media","DesvioPadrao","Minimo","Maximo")
#nomeia colunas
v<-arrayPeriodo()
rownames(resultado)<-v
return(resultado)
}
#Retorna vetor com Duracao Sessoes de um dataframe de dados em q umna sessao foi maior que 1 minuto
DuracaoSessoes<-function(dados){
res<-0
if (nrow(dados)>0) {
res<-as.numeric(vector())
s<-subset(dados, dados$Tempo>1)
res<-as.numeric(s$Tempo)
}else{
res<-c(0)
}
return(res)
}
EstudoEstatisticoDuracaoMensalMensal<-function(dados){
resultado<-data.frame(Media=numeric(),DesvioPadrao=numeric(),Minimo=numeric(),Maximo=numeric())
Jan<-vetorEstatisticoDuracaoMes(dados,"01")
Fev<-vetorEstatisticoDuracaoMes(dados,"02")
Mar<-vetorEstatisticoDuracaoMes(dados,"03")
Ab<-vetorEstatisticoDuracaoMes(dados,"04")
Ma<-vetorEstatisticoDuracaoMes(dados,"05")
Ju<-vetorEstatisticoDuracaoMes(dados,"06")
Jl<-vetorEstatisticoDuracaoMes(dados,"07")
Ag<-vetorEstatisticoDuracaoMes(dados,"08")
St<-vetorEstatisticoDuracaoMes(dados,"09")
Ot<-vetorEstatisticoDuracaoMes(dados,"10")
Nv<-vetorEstatisticoDuracaoMes(dados,"11")
Dz<-vetorEstatisticoDuracaoMes(dados,"12")
resultado<-rbind(Jan,Fev,Mar,Ab,Ma,Ju,Jl,Ag,St,Ot,Nv,Dz)
return(resultado)
}
vetorEstatisticoDuracaoMes<-function(dados,mes){
filtrado<-FiltrarPorMes(dados,mes)
sessoes<-DuracaoSessoes(filtrado)
resultado<-vetorEstatistico(sessoes)
return(resultado)
}
#Faz um estudo estatistico duracao de sessoes para um dado servidor
#dados<-dataframe com informacao das sessoes
#servidor<- servidor a fazer o estudo estatistico de duracao de sessoes
#retorna estudo estatistico de duracao de sessoes para todos periodos a analisar de um servidor
EstudoEstatisticoDuracaoServidor<-function(dados,servidor){
filtrado<-subset(dados,dados$Servidores==servidor)
resultado<-EstudoEstatisticoDuracaoSessoes(filtrado)
return(resultado)
}
#Faz um estudo estatistico de duracao de sessoes para um dado protocolo
#dados<-dataframe com informacao das sessoes
#vpn<- protocolo a fazer o estudo estatistico de duracao de sessoes
#retorna estudo estatistico de duracao de sessoes para todos periodos a analisar de um protocolo
EstudoEstatisticoDuracaoVPN<-function(dados,vpn){
filtrado<-subset(dados,dados$Protocolo==vpn)
resultado<-EstudoEstatisticoDuracaoSessoes(filtrado)
return(resultado)
}
#Faz um estudo estatistico de duracao de sessoes para um dado servidor e protocolo
#dados<-dataframe com informacao das sessoes
#servidor<- servidor a fazer o estudo estatistico de duracao de sessoes
#vpn<- protocolo a fazer o estudo estatistico de duracao de sessoes
#retorna estudo estatistico de duracao de sessoes para todos periodos a analisar de um servidor e protocolo
EstudoDuracaoSessoesServidorVPN<-function(dados,servidor,vpn){
filtrado<-subset(dados,dados$Servidor==servidor & dados$Protocolo==vpn)
resultado<-EstudoEstatisticoDuracaoSessoes(filtrado)
return(resultado)
}
###########################Metodos para o ponto 2 ##################################################################
contabilizarMinutos<-function(inicio,fim){
min<-as.numeric(difftime(fim,inicio,units="mins"))
print(min)
return (min)
}
estudoTaxaFalhasPorCadaDiaDezembro<- function(dados){
da<- ymd("2017-12-1")
res<-as.numeric(vector())
for (i in 1:31) {
print("Dia")
print(da)
taxaDoDia<-taxaDeFalhasPorDia(dados,da)
print("Taxa")
print(taxaDoDia)
res[i]<-taxaDoDia
da<-da + days(1)
}
return (res)
}
taxaDeFalhasPorDia<-function(dados,data){
filtrado<-filtrarPorData(dados,data)
resultado<-determinarTaxaMediaFalhas(filtrado)
return (resultado)
}
filtrarPorData<-function(dados,data){
s<-subset(dados, dados$Data==data)
return (s)
}
filtrarPorDia<-function(dados,dia){
s<-subset(dados, format(as.Date(dados$Inicio),"%d")==dia )
return (s)
}
###Calculo da taxa de falhas
determinarTaxaMediaFalhas <- function(dados){
tempoOperacao<-determinarTempoTotalServidor(dados)
downTime<-determinarDownTime(dados)
tempoOperacao<- tempoOperacao-downTime
numeroFalhas<-determinarNrDowns(dados)
lambda<-numeroFalhas/tempoOperacao
print(lambda)
return(lambda)
}
determinarTempoTotalServidor <- function(dados){
data_inicial <-dados$Inicio[1]
data_final <- dados$Fim[nrow(dados)]
print(data_final)
tempo <- as.numeric(difftime(data_final,data_inicial,units="mins"))
return(tempo)
}
determinarNrUPs<-function(dados){
nrUps<-0
if (nrow(dados)>0) {
ups<-subset(dados,dados$Tempo>=2)
nrUps<-nrow(ups)
}
return(nrUps)
}
determinarUpTime<-function(dados){
upTime<-0
if (nrow(dados)>0) {
upTime<-sum(dados$Tempo)
}
return(upTime)
}
determinarDownTime<-function(dados){
downTime<-0
if (nrow(dados)>0) {
falhas<-subset(dados,dados$Tempo<2)
downTime<-sum(falhas$Tempo)
}
return(downTime)
}
Disponibilidade <- function(dados){
d<-0
if (nrow(dados)) {
s<-nrow(subset(dados,dados$Tempo>=2))
f<-nrow(subset(dados,dados$Tempo<2))
d<-(s/(s+f))*100
}
return(d)
}
calculoFiabilidade<-function(dados,tempo){
fiablilidade<-0
if (nrow(dados)>0) {
t<-seq(from=1,to=tempo,by=1)
falhas<-determinarNrDowns(dados)
tempoOp<-determinarTempoOperacao(dados,tempo)
lambda<-falhas/tempoOp
fiablilidade<-exp(-lambda*t)
}
return(fiablilidade)
}
determinarTempoOperacao<-function(dados,tempo){
temp<-0
if (nrow(dados)>0) {
ups<-determinarNrUPs(dados)
downs<-determinarNrDowns(dados)
delta<-tempo/(ups+downs)
temp<-delta*ups
}
return(temp)
}
#######################################################
##Graficos
mediasFalhasServidores<-c(EstudoEstatisticoFalhasConsecutivas_vsrv8[1][1],EstudoEstatisticoFalhasConsecutivas_vsrv10[1][1],EstudoEstatisticoFalhasConsecutivas_vsrv11[1][1],EstudoEstatisticoFalhasConsecutivas_vsrv16[1][1],EstudoEstatisticoFalhasConsecutivas_vsrv17[1][1])
barplot(mediasFalhasServidores,names.arg = c("vsrv8","vsrv10","vsrv11","vsrv16","vsrv17"),xlab="Servidores",ylab="Minutos",main="Medias de tempo entre falhas consecutivas dos servidores durante o estudo")
